# GitLab CI/CD Pipeline for Manhattan My Way Project
# Using self-hosted GitLab Runner

stages:
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

# Deploy to staging (develop branch)
deploy_staging:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  tags:
    - docker
  before_script:
    - apk add --no-cache openssh-client git
    - docker info
  script:
    - echo "Building and deploying to staging..."
    - docker-compose -f docker-compose.yml build
    - docker-compose -f docker-compose.yml up -d
    - echo "Staging deployment completed!"
    - echo "Access at: http://137.43.49.26:3030"
  environment:
    name: staging
    url: http://137.43.49.26:3030
  only:
    - develop

# Deploy to production (main branch) - Manual deployment
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production server..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        set -e
        
        # Find deployment directory  
        find_deploy_dir() {
          if [ -d '/opt/team9-deploy' ] && [ -w '/opt/team9-deploy' ]; then
            echo '/opt/team9-deploy'
          elif [ -d '\$HOME/team9-deploy' ] && [ -w '\$HOME/team9-deploy' ]; then
            echo '\$HOME/team9-deploy'
          elif [ -d '/tmp/team9-deploy' ] && [ -w '/tmp/team9-deploy' ]; then
            echo '/tmp/team9-deploy'
          else
            echo '\$(pwd)/team9-deploy'
          fi
        }
        
        DEPLOY_BASE=\$(find_deploy_dir)
        echo \"Using deployment directory: \$DEPLOY_BASE\"
        
        # Ensure directories exist
        mkdir -p \$DEPLOY_BASE/production
        mkdir -p \$DEPLOY_BASE/repo
        
        # Update repository to main branch
        cd \$DEPLOY_BASE/repo
        git fetch origin
        git reset --hard origin/main
        
        # Copy to production
        cp -r . \$DEPLOY_BASE/production/
        cd \$DEPLOY_BASE/production
        
        # Set environment variables for production
        export OPENWEATHER_API_KEY='$OPENWEATHER_API_KEY'
        export GOOGLE_MAPS_API_KEY='$GOOGLE_MAPS_API_KEY'
        export NEXT_PUBLIC_MAPBOX_API_KEY='$NEXT_PUBLIC_MAPBOX_API_KEY'
        export WEBAPP_PORT=8080
        export ML_API_PORT=5001
        
        # Update docker-compose for production ports
        sed -i 's/3030:3000/8080:3000/g' docker-compose.yml
        sed -i 's/5000:5000/5001:5000/g' docker-compose.yml
        
        # Deploy
        docker-compose down 2>/dev/null || true
        docker-compose build
        docker-compose up -d
        
        docker-compose ps
        echo \"Production deployment completed!\"
        echo \"Access at: http://137.43.49.26:8080\"
      "
  environment:
    name: production
    url: http://137.43.49.26:8080
  only:
    - main
  when: manual
