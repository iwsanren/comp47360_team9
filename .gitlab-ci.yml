default:
  tags:
    - shell

stages:
  - quality-check
  - deploy

# code quality check
quality_check:
  stage: quality-check
  tags:
    - shell
  script:
    - echo "🔍 Running quality checks..."
    - echo "🧹 Cleaning Docker cache..."
    - docker system prune -af || true
    - echo "📁 Validating project structure..."
    - test -f "webapp/package.json" && echo "✅ Frontend package.json exists"
    - test -f "ml/requirements.txt" && echo "✅ ML requirements.txt exists"
    - test -f "docker-compose.yml" && echo "✅ Docker compose config exists"
    - echo "✅ Quality checks completed"
  only:
    - feature/request-id-logging
    - develop
    - main

deploy_staging:
  stage: deploy
  tags:
    - shell
  before_script:
    - docker --version
    - docker-compose --version
  script:
    - echo "🚀 Building and deploying to staging..."
    - echo "🧹 Cleaning Docker cache before build..."
    - docker system prune -af || true
    - echo "✅ Docker cache cleaned successfully"
    - echo "📁 Setting up deployment directory..."
    - mkdir -p /tmp/team9-deploy/staging
    - rsync -av --exclude='.git' --exclude='.gitlab' --exclude='node_modules' ./ /tmp/team9-deploy/staging/
    - cd /tmp/team9-deploy/staging
    - echo "⚙️ Creating .env file..."
    - echo "OPENWEATHER_API_KEY=$OPENWEATHER_API_KEY" > .env
    - echo "GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY" >> .env
    - echo "NEXT_PUBLIC_MAPBOX_API_KEY=$NEXT_PUBLIC_MAPBOX_API_KEY" >> .env
    - echo "JWT_SECRET=$JWT_SECRET" >> .env
    - echo "NODE_ENV=development" >> .env
    - echo "FLASK_ENV=production" >> .env
    - echo "🐳 Stopping existing containers..."
    - docker-compose down || true
    - echo "🔨 Building containers with request tracking..."
    - docker-compose build --no-cache
    - echo "▶️ Starting containers..."
    - docker-compose up -d
    - echo "📊 Container status:"
    - docker-compose ps
    - echo "📋 Recent logs:"
    - docker-compose logs --tail=30
    - echo "✅ Staging deployment completed!"
    - echo "🌐 Access at: http://137.43.49.26:3030"
  environment:
    name: staging
    url: http://137.43.49.26:3030
  only:
    - develop
    - feature/request-id-logging

deploy_production:
  stage: deploy
  image: docker:24.0.5
  tags:
    - docker
  before_script:
    - apk add --no-cache docker-compose git curl
    - docker info
  script:
    - echo "Cleaning Docker cache before build..."
    - docker system prune -af || true
    - echo "Docker cache cleaned successfully"
    - echo "Building and deploying to production..."
    - echo "Current directory is $(pwd)"
    - echo "Files in directory:"
    - ls -la
    - docker-compose --version
    - echo "Setting up environment variables..."
    - export OPENWEATHER_API_KEY="$OPENWEATHER_API_KEY"
    - export GOOGLE_MAPS_API_KEY="$GOOGLE_MAPS_API_KEY"
    - export NEXT_PUBLIC_MAPBOX_API_KEY="$NEXT_PUBLIC_MAPBOX_API_KEY"
    - export JWT_SECRET="$JWT_SECRET"
    - export WEBAPP_PORT=8080
    - export ML_API_PORT=5000
    - echo "Creating deployment directory..."
    - mkdir -p /tmp/team9-deploy/production
    - cp -r . /tmp/team9-deploy/production/
    - cd /tmp/team9-deploy/production
    - echo "Creating .env file with environment variables..."
    - echo "OPENWEATHER_API_KEY=$OPENWEATHER_API_KEY" > .env
    - echo "GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY" >> .env
    - echo "NEXT_PUBLIC_MAPBOX_API_KEY=$NEXT_PUBLIC_MAPBOX_API_KEY" >> .env
    - echo "JWT_SECRET=$JWT_SECRET" >> .env
    - echo "NODE_ENV=production" >> .env
    - echo "FLASK_ENV=production" >> .env
    - echo "WEBAPP_PORT=8080" >> .env
    - echo "ML_API_PORT=5000" >> .env
    - echo ".env file created:"
    - cat .env
    - echo "Stopping any existing containers..."
    - docker-compose -f docker-compose.prod.yml down || true
    - echo "Cleaning Docker cache before build..."
    - docker system prune -af || true
    - echo "Docker cache cleaned successfully"
    - echo "Building containers..."
    - docker-compose -f docker-compose.prod.yml build
    - echo "Starting containers..."
    - docker-compose -f docker-compose.prod.yml up -d
    - echo "Container status:"
    - docker-compose -f docker-compose.prod.yml ps
    - echo "Production deployment completed!"
    - echo "Access at http://137.43.49.26:8080"
  environment:
    name: production
    url: http://137.43.49.26:8080
  only:
    - main
  when: manual
