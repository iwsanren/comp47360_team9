# Simplified GitLab CI/CD Pipeline for Manhattan My Way Project
# This approach builds directly on the server to avoid GitLab Runner issues

stages:
  - deploy

variables:
  GIT_STRATEGY: none  # Don't clone repo in CI, we'll do it on server

# Deploy to staging (develop branch) - Direct server deployment
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to staging server via direct build..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        set -e
        
        # Find deployment directory
        find_deploy_dir() {
          if [ -d '/opt/team9-deploy' ] && [ -w '/opt/team9-deploy' ]; then
            echo '/opt/team9-deploy'
          elif [ -d '\$HOME/team9-deploy' ] && [ -w '\$HOME/team9-deploy' ]; then
            echo '\$HOME/team9-deploy'
          elif [ -d '/tmp/team9-deploy' ] && [ -w '/tmp/team9-deploy' ]; then
            echo '/tmp/team9-deploy'
          else
            echo '\$(pwd)/team9-deploy'
          fi
        }
        
        DEPLOY_BASE=\$(find_deploy_dir)
        echo \"Using deployment directory: \$DEPLOY_BASE\"
        
        # Ensure directories exist
        mkdir -p \$DEPLOY_BASE/staging
        mkdir -p \$DEPLOY_BASE/repo
        
        # Clone or update repository
        if [ ! -d \"\$DEPLOY_BASE/repo/.git\" ]; then
          echo \"Cloning repository...\"
          git clone https://csgitlab.ucd.ie/ZhaofangHe/comp47360_team9.git \$DEPLOY_BASE/repo
        else
          echo \"Updating repository...\"
          cd \$DEPLOY_BASE/repo
          git fetch origin
          git reset --hard origin/develop
        fi
        
        # Copy project files to staging
        cd \$DEPLOY_BASE/repo
        cp -r . \$DEPLOY_BASE/staging/
        cd \$DEPLOY_BASE/staging
        
        # Set environment variables
        export OPENWEATHER_API_KEY='$OPENWEATHER_API_KEY'
        export GOOGLE_MAPS_API_KEY='$GOOGLE_MAPS_API_KEY' 
        export NEXT_PUBLIC_MAPBOX_API_KEY='$NEXT_PUBLIC_MAPBOX_API_KEY'
        
        # Stop existing containers
        docker-compose down 2>/dev/null || true
        
        # Build and start containers
        echo \"Building and starting containers...\"
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml up -d
        
        # Show container status
        docker-compose ps
        echo \"Staging deployment completed!\"
        echo \"Access at: http://137.43.49.26:3030\"
      "
  environment:
    name: staging
    url: http://137.43.49.26:3030
  only:
    - develop

# Deploy to production (main branch)
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production server..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER "
        set -e
        
        # Find deployment directory
        find_deploy_dir() {
          if [ -d '/opt/team9-deploy' ] && [ -w '/opt/team9-deploy' ]; then
            echo '/opt/team9-deploy'
          elif [ -d '\$HOME/team9-deploy' ] && [ -w '\$HOME/team9-deploy' ]; then
            echo '\$HOME/team9-deploy'
          elif [ -d '/tmp/team9-deploy' ] && [ -w '/tmp/team9-deploy' ]; then
            echo '/tmp/team9-deploy'
          else
            echo '\$(pwd)/team9-deploy'
          fi
        }
        
        DEPLOY_BASE=\$(find_deploy_dir)
        echo \"Using deployment directory: \$DEPLOY_BASE\"
        
        # Ensure directories exist
        mkdir -p \$DEPLOY_BASE/production
        mkdir -p \$DEPLOY_BASE/repo
        
        # Clone or update repository
        if [ ! -d \"\$DEPLOY_BASE/repo/.git\" ]; then
          echo \"Cloning repository...\"
          git clone https://csgitlab.ucd.ie/ZhaofangHe/comp47360_team9.git \$DEPLOY_BASE/repo
        else
          echo \"Updating repository...\"
          cd \$DEPLOY_BASE/repo
          git fetch origin
          git reset --hard origin/main
        fi
        
        # Copy project files to production
        cd \$DEPLOY_BASE/repo
        cp -r . \$DEPLOY_BASE/production/
        cd \$DEPLOY_BASE/production
        
        # Set environment variables
        export OPENWEATHER_API_KEY='$OPENWEATHER_API_KEY'
        export GOOGLE_MAPS_API_KEY='$GOOGLE_MAPS_API_KEY' 
        export NEXT_PUBLIC_MAPBOX_API_KEY='$NEXT_PUBLIC_MAPBOX_API_KEY'
        
        # Stop existing containers
        docker-compose -f docker-compose.prod.yml down 2>/dev/null || true
        
        # Build and start containers
        echo \"Building and starting production containers...\"
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml up -d
        
        # Show container status
        docker-compose -f docker-compose.prod.yml ps
        echo \"Production deployment completed!\"
        echo \"Access at: http://137.43.49.26:8080\"
      "
  environment:
    name: production
    url: http://137.43.49.26:8080
  only:
    - main
  when: manual
