# GitLab CI/CD Pipeline for Manhattan My Way Project
stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Build stage - Build Docker images
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building ML API Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA ./ml
    - docker push $CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA
    
    - echo "Building Web App Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA ./webapp
    - docker push $CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA
  only:
    - develop
    - main

# Test stage - Run tests
test:
  stage: test
  image: node:18-alpine
  script:
    - echo "Running frontend tests..."
    - cd webapp
    - npm ci
    - npm run lint
    - echo "Tests completed successfully!"
  only:
    - develop
    - main

# Deploy to staging (develop branch)
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to staging server..."
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "
        # Function to find deployment directory
        find_deploy_dir() {
          if [ -d '/opt/team9-deploy' ] && [ -w '/opt/team9-deploy' ]; then
            echo '/opt/team9-deploy'
          elif [ -d '\$HOME/team9-deploy' ] && [ -w '\$HOME/team9-deploy' ]; then
            echo '\$HOME/team9-deploy'
          elif [ -d '/tmp/team9-deploy' ] && [ -w '/tmp/team9-deploy' ]; then
            echo '/tmp/team9-deploy'
          else
            echo '\$(pwd)/team9-deploy'
          fi
        }
        
        DEPLOY_BASE=\$(find_deploy_dir) &&
        echo \"Using deployment directory: \$DEPLOY_BASE\" &&
        cd \$DEPLOY_BASE/staging &&
        docker-compose down &&
        docker pull $CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA &&
        docker pull $CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA &&
        export ML_API_IMAGE=$CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA &&
        export WEBAPP_IMAGE=$CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA &&
        docker-compose up -d &&
        echo 'Staging deployment completed!'
      "
  environment:
    name: staging
    url: http://137.43.49.26:3030
  only:
    - develop

# Deploy to production (main branch)
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to production server..."
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "
        # Function to find deployment directory
        find_deploy_dir() {
          if [ -d '/opt/team9-deploy' ] && [ -w '/opt/team9-deploy' ]; then
            echo '/opt/team9-deploy'
          elif [ -d '\$HOME/team9-deploy' ] && [ -w '\$HOME/team9-deploy' ]; then
            echo '\$HOME/team9-deploy'
          elif [ -d '/tmp/team9-deploy' ] && [ -w '/tmp/team9-deploy' ]; then
            echo '/tmp/team9-deploy'
          else
            echo '\$(pwd)/team9-deploy'
          fi
        }
        
        DEPLOY_BASE=\$(find_deploy_dir) &&
        echo \"Using deployment directory: \$DEPLOY_BASE\" &&
        cd \$DEPLOY_BASE/production &&
        docker-compose down &&
        docker pull $CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA &&
        docker pull $CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA &&
        export ML_API_IMAGE=$CI_REGISTRY_IMAGE/ml-api:$CI_COMMIT_SHA &&
        export WEBAPP_IMAGE=$CI_REGISTRY_IMAGE/webapp:$CI_COMMIT_SHA &&
        docker-compose up -d &&
        echo 'Production deployment completed!'
      "
  environment:
    name: production
    url: http://137.43.49.26:8080
  only:
    - main
  when: manual
